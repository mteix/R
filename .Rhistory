source('~/Desktop/life2.r')
source('~/Desktop/life2.r')
?colorRampPalette
palette()
palette(grey)
palette("grey")
palette("white","black")
source('~/Desktop/life2.r')
palette()
palette("rainbow")
palette(value = 2)
palette(rainbow())
palette(rainbow(2]))
palette(rainbow(2))
palette()
palette(gray(2))
palette(gray(1))
palette(gray(0:1))
palette()
source('~/Desktop/life2.r')
palette()
source('~/Desktop/life2.r')
palette()
palette("blue","yellow")
palette()
source('~/Desktop/life2.r')
palette()
palette(gray(0:50 / 50))
palette()
source('~/Desktop/life2.r')
source('~/Desktop/life2.r')
source('~/Desktop/life2.r')
palette()
colorRampPalette
colorRampPalette()
palette(rainbow(10))
palette
palette()
source('~/Desktop/life2.r')
source('~/Desktop/life2.r')
source('~/Desktop/life2.r')
source('~/Desktop/life2.r')
source('~/Desktop/life2.r')
source('~/Desktop/life2.r')
rm(list=ls())
source('~/Desktop/life2.r')
source('~/Desktop/life2.r')
source('~/Desktop/life2.r')
114/(600*600)
114/(600*600)*100
rm(list=ls())
#
#This will be the zommbie code
#
library(caTools)         # external package providing write.gif function
rm(list=ls())
jet.colors <- colorRampPalette(rainbow(6))
#Time measured
#ptm <- proc.time()
#proc.time() - ptm
startTime <- Sys.time()
iter <- 20
m <- 100 # define size
#define 0 1 matrix
# cluster size
#initialize random Matrix
#sqNet <- matrix(sample((0:1),size=m*m,replace=T),m,m)
#initiate matrix with some squares
sqNet <- matrix(as.integer(abs(rnorm(m*m)*10) %% 3),m,m)
# the Life is the matrix to be printed. SqNet is the one that the
# adjancencies are evaluates
theLife <- sqNet
X <- array(0, c(m,m,iter)) # initialize output 3D array
k=1
X[,,k] <- theLife
write.gif(X, "Life.gif",col=jet.colors, delay=10)
for (k in 2:iter) {
cat ("Iterations Completed: ", k/iter*100, "% ")
#######################################
#Statting the cell automato loop
# iant, jant etc are periodic boundaries
# in the m x m lattice
#######################################
for(i in 1:m){
iant <- i-1
ipos <- i+1
if(i-1<1) iant <- m
if(i+1>m) ipos <- 1
for(j in 1:m){
jant=j-1
jpos=j+1
if(j-1<1) jant <- m
if(j+1>m) jpos <- 1
#count the number of neighbour of the cell
neigh <- sqNet[iant,j]+sqNet[ipos,j]+sqNet[i,jant]+sqNet[i,jpos] #neighbours 1st order
neigh <- neigh + sqNet[iant,jant]+sqNet[iant,jpos]+sqNet[ipos,jant]+sqNet[ipos,jpos]
##########################################################
##########################################################
#These rules are from the "Game of Life" celullar automato
# (Conway, 1970)
##########################################################
##########################################################
if(sqNet[i,j]==1){
#DEAD BY OVER AND UNDER CROWD
if(neigh<2 || neigh>3) {
theLife[i,j] <- 0
}
else{
theLife[i,j] <- 1
}
}
if(sqNet[i,j]==0){
if(neigh == 3) {
theLife[i,j] <- 1
}
else{
theLife[i,j] <- 0
}
}
#END OF RULES
}
}
cat("...........Difference: ", sum(theLife)-sum(sqNet),"\n")
X[,,k] <- theLife # capture results
######################################
# exit condition when life stabilizes
######################################
#if(abs((sum(theLife)-sum(sqNet))/(m*m)) <= 1/10000) {
#  write.gif(X, "Life.gif",col=jet.colors, delay=50)
#  break
#}
#######################################
sqNet <- theLife
}
cat("\n\n Elapased program time (m): ",(Sys.time()-startTime)/60)
startTime <- Sys.time()
write.gif(X, "Life.gif",col=jet.colors, delay=50)
cat("\n\n Writing gif  time (s): ",Sys.time()-startTime)
source('~/Desktop/life.R')
debugSource('~/Desktop/life.R')
sqNet
source('~/Desktop/life.R')
warnings()
source('~/Desktop/life.R')
warnings()
source('~/Desktop/life.R')
source('~/Desktop/life.R')
source('~/Desktop/life.R')
palette()
source('~/Desktop/life.R')
source('~/Desktop/life.R')
rm(list=ls())
debugSource('~/Desktop/life.R')
debugSource('~/Desktop/life.R')
sqNet
matrix(rnorm(25),5,5)
matrix(rnorm(25),5,5)*100
debugSource('~/Desktop/life.R')
source('~/Desktop/life.R')
source('~/Desktop/life.R')
source('~/Desktop/life.R')
#
#This will be the zommbie code
#
library(caTools)         # external package providing write.gif function
rm(list=ls())
jet.colors <- colorRampPalette(rainbow(3))
#Time measured
#ptm <- proc.time()
#proc.time() - ptm
startTime <- Sys.time()
iter <- 20
m <- 100 # define size
#define 0 1 matrix
# cluster size
#initialize random Matrix
#sqNet <- matrix(sample((0:1),size=m*m,replace=T),m,m)
#initiate matrix with some squares
sqNet <- matrix(as.integer(abs(rnorm(m*m)*10) %% 3),m,m)
# the Life is the matrix to be printed. SqNet is the one that the
# adjancencies are evaluates
theLife <- sqNet
X <- array(0, c(m,m,iter)) # initialize output 3D array
k=1
X[,,k] <- theLife*(0.5)
write.gif(X, "Zombie.gif",col=jet.colors, delay=10)
for (k in 2:iter) {
cat ("Iterations Completed: ", k/iter*100, "% ")
#######################################
#Statting the cell automato loop
# iant, jant etc are periodic boundaries
# in the m x m lattice
#######################################
for(i in 1:m){
iant <- i-1
ipos <- i+1
if(i-1<1) iant <- m
if(i+1>m) ipos <- 1
for(j in 1:m){
jant=j-1
jpos=j+1
if(j-1<1) jant <- m
if(j+1>m) jpos <- 1
#count the number of neighbour of the cell
neigh <- sqNet[iant,j]+sqNet[ipos,j]+sqNet[i,jant]+sqNet[i,jpos] #neighbours 1st order
neigh <- neigh + sqNet[iant,jant]+sqNet[iant,jpos]+sqNet[ipos,jant]+sqNet[ipos,jpos]
##########################################################
##########################################################
#These rules are from the "Game of Life" celullar automato
# (Conway, 1970)
##########################################################
##########################################################
if(sqNet[i,j]==2){
theLife[i,j] <- 2
}
if(sqNet[i,j]==1){
#DEAD BY OVER AND UNDER CROWD
if(neigh<2 || neigh>3) {
theLife[i,j] <- 0
}
else{
theLife[i,j] <- 1
}
}
if(sqNet[i,j]==0){
if(neigh == 3) {
theLife[i,j] <- 1
}
else{
theLife[i,j] <- 0
}
}
#END OF RULES
}
}
cat("...........Difference: ", sum(theLife)-sum(sqNet),"\n")
X[,,k] <- theLife*(0.5) # capture results
######################################
# exit condition when life stabilizes
######################################
#if(abs((sum(theLife)-sum(sqNet))/(m*m)) <= 1/10000) {
#  write.gif(X, "Life.gif",col=jet.colors, delay=50)
#  break
#}
#######################################
sqNet <- theLife
}
cat("\n\n Elapased program time (m): ",(Sys.time()-startTime)/60)
startTime <- Sys.time()
write.gif(X, "zombie.gif",col=jet.colors, delay=50)
cat("\n\n Writing gif  time (s): ",Sys.time()-startTime)
source('~/Desktop/life.R')
source('~/Desktop/life.R')
jet.colors <- c("white",colorRampPalette(rainbow(2)))
palette()
source('~/Desktop/life.R')
jet.colors <- colorRampPalette("white",colorRampPalette(rainbow(2)))
jet.colors <- colorRampPalette(c("white",colorRampPalette(rainbow(2)))
jet.colors <- colorRampPalette(c("white",colorRampPalette(rainbow(2))))
jet.colors <- colorRampPalette(c("white",rainbow(3)))
palette()
jet.colors <- colorRampPalette(c("white",rainbow(2)))
jet.colors
jet.colors()
source('~/Desktop/life.R')
source('~/Desktop/life.R')
source('~/Desktop/life.R')
source('~/Desktop/life.R')
source('~/Desktop/life.R')
source('~/Desktop/life.R')
source('~/Desktop/life.R')
source('~/Desktop/life.R')
source('~/Desktop/life.R')
source('~/Desktop/life.R')
source('~/Desktop/life.R')
source('~/Desktop/life.R')
debugSource('~/Desktop/life.R')
neigh
sqNet
neigh
neigh
source('~/Desktop/life.R')
source('~/Desktop/life.R')
source('~/Desktop/life.R')
neigh
sum(sqNet[iant,j]+sqNet[ipos,j]+sqNet[i,jant]+sqNet[i,jpos])
?sum
summary(sqNet[iant,j]+sqNet[ipos,j]+sqNet[i,jant]+sqNet[i,jpos])
table(sqNet[iant,j]+sqNet[ipos,j]+sqNet[i,jant]+sqNet[i,jpos])
?sum
table(sqNet[iant,j],sqNet[ipos,j],sqNet[i,jant],sqNet[i,jpos])
sum(sqNet[iant,j],sqNet[ipos,j],sqNet[i,jant],sqNet[i,jpos])
neigh
summary(sum(sqNet[iant,j],sqNet[ipos,j],sqNet[i,jant],sqNet[i,jpos]))
summary(all,sum(sqNet[iant,j],sqNet[ipos,j],sqNet[i,jant],sqNet[i,jpos]))
summary(sum(sqNet[iant,j],sqNet[ipos,j],sqNet[i,jant],sqNet[i,jpos]))
piroks <- as.factor(sqNet[iant,j],sqNet[ipos,j],sqNet[i,jant],sqNet[i,jpos])
list(sqNet[iant,j],sqNet[ipos,j],sqNet[i,jant],sqNet[i,jpos])
table(list(sqNet[iant,j],sqNet[ipos,j],sqNet[i,jant],sqNet[i,jpos]))
list(sqNet[iant,j],sqNet[ipos,j],sqNet[i,jant],sqNet[i,jpos])
list(sum(sqNet[iant,j],sqNet[ipos,j],sqNet[i,jant],sqNet[i,jpos]))
list(sqNet[iant,j],sqNet[ipos,j],sqNet[i,jant],sqNet[i,jpos])
vec <- list(sqNet[iant,j],sqNet[ipos,j],sqNet[i,jant],sqNet[i,jpos])
vec
hist(vec)
vec <- list(as.integer((sqNet[iant,j],sqNet[ipos,j],sqNet[i,jant],sqNet[i,jpos])))
vec <- list(sqNet[iant,j],sqNet[ipos,j],sqNet[i,jant],sqNet[i,jpos])
vec
vec <- as.integer(list(sqNet[iant,j],sqNet[ipos,j],sqNet[i,jant],sqNet[i,jpos]))
vec
source('~/Desktop/life.R')
vec <- as.integer(list(sqNet[iant,j],sqNet[ipos,j],sqNet[i,jant],sqNet[i,jpos]))
vec
summary(vec)
range(vec)
sum(range(vec))
?summary
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list(lapply(flags,class))
cls_list <- (lapply(flags,class))
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_lis)
as.character(cls_list)
sapply(cls_vect)
sapply(cls_vect,class)
?lapply
sapply(cls_vect)
Nxt()
nxt()
info()
skip()
skip()
sum(flags$orange)
skip()
skip()
skip()
lapply(flag_colors,sum)
bye()
sum(vec,range(vec))
sum(vec)
vec
vec <- as.integer(list(sqNet[iant,j],sqNet[ipos,j],sqNet[i,jant],sqNet[i,jpos]))
range(vec)
sum(vec,$range(vec))
sum(vec,$1)
vec
data <- data.frame(vec,range(vec))
data
data.sum <-tapply(vec,range(vec),sum)
data <- data.frame(vec,as.factor(vec))
data.sum <-tapply(vec,range(vec),sum)
data
cev
vec
as.factor(vec)
ave(vec)
?select
swirl()
ls
ls
ls()
class(plats)
class(plants)
skip()
skip()
skip()
skip()
skip()
names(plants)
skip()
skip()
skip()
skip()
summary(plants)
play()
summary(vec)
datas <- datafra
datas <- data.frame(as.factors(vec),vec)
datas <- data.frame(as.factor(vec),vec)
datas
names(datas) <- c("A","B")
datas
rsit <- datas(A,B,sum)
rsit <- datas[A,B,sum]
vec[vec$A=value] <- vec
vec[vec$A=as.factor(vec)] <- vec
vec
data
sum(vec)
?sum
swirl()
x
x[1:10]
x[is.na(X)]
skip()
skip()
skip()
vec[vec>1]
source('~/Desktop/life.R')
neigh <- c(sqNet[iant,j] ,sqNet[ipos,j], sqNet[i,jant], sqNet[i,jpos])
neigh
length(neigh[neigh==3])
length(neigh[neigh==1])
source('~/Desktop/life.R')
?matrix
A = matrix(rnorm(25),5,5)
A <- matrix(rnorm(25),5,5)
Ainv <- solve(A)
A*Ainv
Ainv
A <- matrix(c(1,2,3,4,5,6,7,8,9),3,3)
A
solve(A)
A <- matrix(c(1,2,3,4,5,6,7,8,0),3,3)
solve(A)
A*solve(A)
A <- matrix(rnorm(25),5,5)
Ainv <- solve(A)
A %*% Ainv
as.integer(A %*% Ainv)
A %*% AinV
Ainv
A %*% AinV
A <- matrix(rnorm(10*10),10,10)
Ainv <- solve(A)
A %*% Ainv
floor(A %*% Ainv)
Ainv %*% A
floor(Ainv %*% A)
A <- matrix(rnorm(10*10),10,10,byrow= T)
A
qr.solve(A)
Ainv <- qr.solve(A)
A %*% Ainv
as.integer(A %*% Ainv)
trunc(A %*% Ainv)
A <- matrix(rnorm(10*10),10,10,byrow= T)
Ainv <- solve(A)
trunc(A %*% Ainv)
trunc(Ainv %*% A)
A <- matrix(rnorm(10*10),10,10)
Ainv <- solve(A)
trunc(A %*% Ainv)
rm(list=ls())
A = matrix (c(1,0,1,0),2,2,byrow=T)
A
solve(A)
A = matrix (c(1,0,1,1),2,2,byrow=T)
solve(A)
Ainv <- solve(A)
Ainv
A %*% Ainv
A <- matrix(rnorm(10*10)*100,10,10)
solve(A)
Ainv <- solve(A)
A %*% Ainv
floor(A %*% Ainv)
trunc(A %*% Ainv)
A %*% Ainv
trunc(A %*% Ainv)
A <- matrix(trunc(rnorm(10*10)*100),10,10)
Ainv <- solve(A)
A %*% Ainv
trunc(A %*% Ainv)
source('~/Desktop/R files/zombie.R')
source('~/Desktop/R files/R/Graphs.R')
source('~/Desktop/R files/zombie.R')
setwd("C:/Users/edbmjtx/Documents/GitHub/R")
getwd
getwd()
source('~/GitHub/R/functionExample.R')
X
x
y
rm(list=ls())
source('~/.active-rstudio-document')
y
x
y
source('~/.active-rstudio-document')
y
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
set.seed(3000)
x <- rpois(500, 4)
y <- mysummary(x)
# y$center is the median (4)
# y$spread is the median absolute deviation (1.4826)
y <- mysummary(x, npar=T, print=T)
# no output
# y$center is the mean (4.052)
# y$spread is the standard deviation (2.01927)
set.seed(100)
x <- rpois(500, 4)
y <- mysummary(x)
# y$center is the median (4)
# y$spread is the median absolute deviation (1.4826)
y <- mysummary(x, npar=F, print=F)
# no output
# y$center is the mean (4.052)
y <- mysummary(x, npar=T, print=F)
y <- mysummary(x, npar=F, print=T)
?mad
source('~/GitHub/R/zombie.R')
source('~/GitHub/R/zombie.R')
